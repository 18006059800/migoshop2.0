package com.migo3.sso.pojo.generated;

import com.migo3.sso.pojo.User;
import com.speedment.runtime.core.util.OptionalUtil;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Date;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * User}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedUserImpl implements User {
    
    private long id;
    private String username;
    private String password;
    private String phone;
    private String email;
    private Timestamp created;
    private Timestamp updated;
    
    protected GeneratedUserImpl() {
        
    }
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public String getUsername() {
        return username;
    }
    
    @Override
    public String getPassword() {
        return password;
    }
    
    @Override
    public Optional<String> getPhone() {
        return Optional.ofNullable(phone);
    }
    
    @Override
    public Optional<String> getEmail() {
        return Optional.ofNullable(email);
    }
    
    @Override
    public Timestamp getCreated() {
        return created;
    }
    
    @Override
    public Timestamp getUpdated() {
        return updated;
    }
    
    @Override
    public User setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public User setUsername(String username) {
        this.username = username;
        return this;
    }
    
    @Override
    public User setPassword(String password) {
        this.password = password;
        return this;
    }
    
    @Override
    public User setPhone(String phone) {
        this.phone = phone;
        return this;
    }
    
    @Override
    public User setEmail(String email) {
        this.email = email;
        return this;
    }
    
    @Override
    public User setCreated(Date created) {
        this.created = (Timestamp) created;
        return this;
    }
    
    @Override
    public User setUpdated(Date updated) {
        this.updated = (Timestamp) updated;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = " + Objects.toString(getId()));
        sj.add("username = " + Objects.toString(getUsername()));
        sj.add("password = " + Objects.toString(getPassword()));
        sj.add("phone = " + Objects.toString(OptionalUtil.unwrap(getPhone())));
        sj.add("email = " + Objects.toString(OptionalUtil.unwrap(getEmail())));
        sj.add("created = " + Objects.toString(getCreated()));
        sj.add("updated = " + Objects.toString(getUpdated()));
        return "UserImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof User)) { return false; }
        final User thatUser = (User)that;
        if (this.getId() != thatUser.getId()) {return false; }
        if (!Objects.equals(this.getUsername(), thatUser.getUsername())) {return false; }
        if (!Objects.equals(this.getPassword(), thatUser.getPassword())) {return false; }
        if (!Objects.equals(this.getPhone(), thatUser.getPhone())) {return false; }
        if (!Objects.equals(this.getEmail(), thatUser.getEmail())) {return false; }
        if (!Objects.equals(this.getCreated(), thatUser.getCreated())) {return false; }
        if (!Objects.equals(this.getUpdated(), thatUser.getUpdated())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getUsername());
        hash = 31 * hash + Objects.hashCode(getPassword());
        hash = 31 * hash + Objects.hashCode(getPhone());
        hash = 31 * hash + Objects.hashCode(getEmail());
        hash = 31 * hash + Objects.hashCode(getCreated());
        hash = 31 * hash + Objects.hashCode(getUpdated());
        return hash;
    }
}